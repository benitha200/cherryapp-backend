generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CWS_MANAGER
  SUPER_ADMIN
  SUPERVISOR
  MD
  FINANCE
  OPERATIONS
}

enum DeliveryType {
  DIRECT_DELIVERY
  SITE_COLLECTION
  SUPPLIER
}

enum GradeType {
  A
  B
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      UserRole
  cws       CWS?     @relation(fields: [cwsId], references: [id])
  cwsId     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CWS {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  code            String           @unique @default("MSH")
  location        String
  users           User[]
  purchases       Purchase[]
  siteCollections SiteCollection[]
  processing Processing[]
  havespeciality Boolean @default(false)
  pricing         CWSPricing[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Purchase {
  id                Int            @id @default(autoincrement())
  deliveryType      DeliveryType
  totalKgs          Float
  totalPrice        Float
  cherryPrice       Float
  transportFee      Float
  commissionFee     Float
  grade             GradeType
  cws               CWS            @relation(fields: [cwsId], references: [id])
  cwsId             Int
  batchNo           String         @default("24NYK2105CA")
  purchaseDate      DateTime       @default(now())
  siteCollection    SiteCollection? @relation(fields: [siteCollectionId], references: [id], onDelete: SetNull)
  siteCollectionId  Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model SiteCollection {
  id          Int        @id @default(autoincrement())
  name        String
  cws         CWS        @relation(fields: [cwsId], references: [id])
  cwsId       Int
  purchases   Purchase[]
  fees        SiteCollectionFees[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Processing {
  id             Int             @id @default(autoincrement())
  batchNo        String
  processingType String
  totalKgs       Float
  grade          GradeType
  startDate      DateTime        @default(now())
  endDate        DateTime?
  status         String @default("PENDING")
  notes          String?
  cws            CWS             @relation(fields: [cwsId], references: [id])
  cwsId          Int
  baggingOffs   BaggingOff[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model BaggingOff {
  id            Int      @id @default(autoincrement())
  batchNo       String
  processingId  Int
  processing    Processing @relation(fields: [processingId], references: [id])
  date          DateTime
  outputKgs     Json    
  totalOutputKgs Float
  status        String   @default("COMPLETED")
  notes         String?
  transfers     Transfer[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Transfer {
  id            Int         @id @default(autoincrement())
  batchNo       String
  baggingOff    BaggingOff @relation(fields: [baggingOffId], references: [id])
  baggingOffId  Int        
  transferDate  DateTime    @default(now())
  status        String     @default("COMPLETED")
  notes         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model GlobalFees {
  id                Int      @id @default(autoincrement())
  commissionFee    Float    // Global commission fee for site collections
  transportFee     Float    // Default transport fee for direct delivery and supplier
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model CWSPricing {
  id            Int      @id @default(autoincrement())
  cws           CWS      @relation(fields: [cwsId], references: [id])
  cwsId         Int
  gradeAPrice   Float    // Cherry A price for this CWS
  transportFee  Float    // Transport fee for direct delivery and supplier at this CWS
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model SiteCollectionFees {
  id               Int           @id @default(autoincrement())
  siteCollection   SiteCollection @relation(fields: [siteCollectionId], references: [id], onDelete: Cascade)
  siteCollectionId Int
  transportFee     Float
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}